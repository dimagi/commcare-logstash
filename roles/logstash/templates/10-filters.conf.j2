##
# {{ ansible_managed }}
#

{%- macro url_group(input_field, output_field) -%}
        if ![{{ input_field}}] {
            mutate {
                add_field => { "{{ output_field }}" => "" }
            }
        } else if [{{ input_field }}] =~ "/hq/multimedia/file/CommCareAudio" {
            mutate {
                add_field => { "{{ output_field }}" => "mm/audio" }
            }
        } else if [{{ input_field }}] =~ "/hq/multimedia/file/CommCareVideo" {
            mutate {
                add_field => { "{{ output_field }}" => "mm/video" }
            }
        } else if [{{ input_field }}] =~ "/hq/multimedia/file/CommCareImage" {
            mutate {
                add_field => { "{{ output_field }}" => "mm/image" }
            }
        } else if [{{ input_field }}] =~ "/hq/multimedia/file/" {
            mutate {
                add_field => { "{{ output_field }}" => "mm/other" }
            }
        } else if [{{ input_field }}] =~ "/accounts/login/" {
            mutate {
                add_field => { "{{ output_field }}" => "login" }
            }
        } else if [{{ input_field }}] =~ "/home/" {
            mutate {
                add_field => { "{{ output_field }}" => "home" }
            }
        } else if [{{ input_field }}] =~ "/pricing/" {
            mutate {
                add_field => { "{{ output_field }}" => "pricing" }
            }
        } else if [{{ input_field }}] =~ "/formplayer/" {
            mutate {
                add_field => { "{{ output_field }}" => "formplayer" }
            }
        } else if [{{ input_field }}] =~ "/static/" or [{{ input_field }}] =~ "favicon.ico" {
            mutate {
                add_field => { "{{ output_field }}" => "static" }
            }
        } else if [{{ input_field }}] =~ "^/a/[0-9a-z-]+" {
            mutate {
                split => ["{{ input_field }}", "/"]
            }
            if "phone" in [{{ input_field }}] {
                mutate {
                    add_field => { "{{ output_field }}" => "%{[{{ input_field }}][3]}/%{[{{ input_field }}][4]}" }
                }
            } else {
                mutate {
                    add_field => { "{{ output_field }}" => "%{[{{ input_field }}][3]}" }
                }
                alter {
                    coalesce => [
                        "{{ output_field }}", "{%raw%}%{{%endraw%}{{ output_field }}}", "other"
                    ]
                }
            }
        } else {
            mutate {
                add_field => { "{{ output_field }}" => "other" }
            }
        }
{%- endmacro %}

filter {
    if [type] == "nginx-timing" {
        grok {
            match => [
                "message", "\[%{HTTPDATE:http_timestamp}\] (?<cache_status>[-\w]+) %{WORD:http_method} %{DATA:uri_path}(\?%{GREEDYDATA:uri_query})? HTTP/%{NUMBER:httpversion} %{NUMBER:status_code} %{NUMBER:request_time} %{NUMBER:request_length} %{NUMBER:body_sent}( %{URIPROTO}://(?:%{URIHOST})?(?:%{URIPATHPARAM:referer})?)?"
            ]
        }
        # Add domain
        grok {
            match => { "message" => "/a/(?<domain>[0-9a-z-]+)" }
            tag_on_failure => ["_domainparsefailure"]
        }
        if "_domainparsefailure" in [tags] {
            mutate {
                add_field => { "domain" => "" }
                remove_tag => [ "_domainparsefailure" ]
            }
        }

        # Parse date
        date {
            match => [ "http_timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
        }
        # Parse request duration
        mutate {
            convert => { "request_time" => "float" }
        }

        # Set apdex
        if [request_time] {
            if [request_time] > 12 {
                mutate {
                    add_field => { "apdex" => 0 }
                }
            } else if [request_time] > 3 {
                mutate {
                    add_field => { "apdex" => 0.5 }
                }
            } else {
                mutate {
                    add_field => { "apdex" => 1 }
                }
            }
        }    
        mutate {
            convert => { "apdex" => "float" }
        }

        # Calculate Bandwidth
        mutate{
             convert => { "request_length" => "integer" }
             convert => { "body_sent" => "integer" }
        }
        ruby{
            code =>
                "bytes_total = event.get('request_length') + event.get('body_sent');
                 event.set('bytes_total',bytes_total)"
        }
 
        # Parse url_group
        {{ url_group('uri_path', 'url_group') }}
        {{ url_group('referer', 'referer_group') }}

        # Cleanup
        mutate {
            remove_field => [ "uri_path", "uri_query", "bytes", "httpversion", "message", "referer", "request_length", "body_sent" ]
        }

    }
    
    if [type] == "nginx-error" {
        grok {
            match => [
                "message",  "(?<http_timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}: \*%{NUMBER}|\*%{NUMBER}) %{DATA:err_message}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: \"%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\")?(?:, upstream: \"%{DATA:upstream}\")?(?:, host: \"%{IPORHOST:host}\")?(?:, referrer: \"%{URI:referrer}\")?"
            ]
        }
         # Add domain
        grok {
            match => { "message" => "/a/(?<domain>[0-9a-z-]+)" }
            tag_on_failure => ["_domainparsefailure"]
        }
        if "_domainparsefailure" in [tags] {
            mutate {
                add_field => { "domain" => "" }
                remove_tag => [ "_domainparsefailure" ]
            }
        }

        # Parse date
        date {
            match => [ "http_timestamp" , "YYYY/MM/dd HH:mm:ss" ]
        }
        
        # Replace error message with custom message
        if [err_message] =~ "an upstream response is buffered to a temporary file" {
            mutate{
                replace => { "[err_message]" => "buffer_to_file/upstream" }
            } 
        }
        else if [err_message] =~ "a client request body is buffered to a temporary file" {
            mutate{
                replace => { "[err_message]" => "buffer_to_file/client" }
            } 
        }
        else if [err_message] =~ "failed \(111: Connection refused\) while connecting to upstream" {
            mutate{
                replace => { "[err_message]" => "connection_refused" }
            } 
        }
        # Filter zone being hit 
        else if [err_message] =~ "limiting requests"{
            grok{
                match => {"err_message" => ".*\"(?<zone>[a-z_]+)\""}
                tag_on_failure => ["_zoneparsefailuer"]
            }
        }     
        else{
            mutate{
                replace => { "[err_message]" => "others" }
            } 
        }
        
        if "_zoneparsefailuer" in [tags] {
            mutate {
                add_field => { "zone" => "" }
                remove_tag => [ "_zoneparsefailuer" ]
            }
        }
        # Cleanup
        mutate {
            remove_field => [ "request", "bytes", "httpversion", "message", "pid", "referrer" ]
        }

    }
}
